{"version":3,"sources":["components/TriviaQuestionComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TriviaQuestionComponent","questionData","questionNumber","answers","incorrect_answers","correct_answer","array","randomIndex","currentIndex","length","Math","floor","random","shuffle","style","margin","Typography","textAlign","question","map","answer","opentdb","require","QuestionCategories","QuestionDifficulties","QuestionTypes","App","useState","questions","setQuestions","amount","setAmount","category","setCategory","difficulty","setDifficulty","type","setType","getQuestions","a","getToken","newToken","options","token","getTrivia","uniqueTrivia","console","log","className","variant","component","align","gutterBottom","padding","display","id","flex","marginBottom","Slider","aria-label","valueLabelDisplay","defaultValue","min","max","value","onChange","event","newValue","activeThumb","FormControl","size","Select","target","paddingLeft","paddingRight","sort","MenuItem","Button","color","textTransform","onClick","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6ae705b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Typography } from \"@mui/material\";\r\n\r\ninterface Props {\r\n\tquestionData: TriviaQuestion;\r\n\tquestionNumber: number;\r\n}\r\n\r\nexport const TriviaQuestionComponent: React.FC<Props> = ({ questionData, questionNumber }) => {\r\n\tconst shuffle = (array: string[]) => {\r\n\t\tlet currentIndex = array.length,\r\n\t\t\trandomIndex;\r\n\r\n\t\t// While there remain elements to shuffle...\r\n\t\twhile (currentIndex !== 0) {\r\n\t\t\t// Pick a remaining element...\r\n\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\r\n\t\t\tcurrentIndex--;\r\n\r\n\t\t\t// And swap it with the current element.\r\n\t\t\t[array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\t};\r\n\r\n\t//const highlightCorrectAnswer = () => {};\r\n\r\n\tvar answers: string[] = [...questionData.incorrect_answers, questionData.correct_answer];\r\n\tshuffle(answers);\r\n\r\n\treturn (\r\n\t\t<div style={{ margin: 100 }}>\r\n\t\t\t<Typography style={{ textAlign: \"left\" }}>\r\n\t\t\t\t{questionNumber + 1}. {questionData.question}\r\n\t\t\t</Typography>\r\n\t\t\t{answers.map((answer) => {\r\n\t\t\t\treturn <Typography key={answer}>{answer}</Typography>;\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n/*\r\nTo add:\r\n\r\nmake component for answers? if clicked, highlights correct answer.\r\n\r\nQuestion: make case / switch thing: if true or false, add in front of question, etc\r\n\r\n*/\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Button, Typography, FormControl, Select, SelectChangeEvent, MenuItem, Slider } from \"@mui/material\";\nimport { TriviaQuestionComponent } from \"./components/TriviaQuestionComponent\";\nconst opentdb = require(\"opentdb-api\");\n\ninterface TriviaOptions {\n\tamount: number;\n\tcategory: string;\n\tdifficulty: string;\n\ttype: string;\n\ttoken: any;\n}\n\nconst QuestionCategories = [\n\t\"any\",\n\t\"general\",\n\t\"books\",\n\t\"film\",\n\t\"music\",\n\t\"theatre\",\n\t\"television\",\n\t\"videogames\",\n\t\"boardgames\",\n\t\"science\",\n\t\"computers\",\n\t\"mathematics\",\n\t\"math\",\n\t\"mythology\",\n\t\"sports\",\n\t\"geography\",\n\t\"history\",\n\t\"politics\",\n\t\"art\",\n\t\"celebrities\",\n\t\"animals\",\n\t\"vehicles\",\n\t\"comics\",\n\t\"gadgets\",\n\t\"anime\",\n\t\"cartoons\",\n];\n\nconst QuestionDifficulties = [\"any\", \"easy\", \"medium\", \"hard\"];\n\nconst QuestionTypes = [\"any\", \"choice\", \"multiple\", \"truefalse\", \"boolean\"];\n\n// const getRandomInt = (max: number) => {\n// \treturn Math.floor(Math.random() * max);\n// };\n\nfunction App() {\n\tconst [questions, setQuestions] = useState<TriviaQuestion[]>([]);\n\tconst [amount, setAmount] = useState<number>(1);\n\tconst [category, setCategory] = useState<string>(\"any\");\n\tconst [difficulty, setDifficulty] = useState<string>(\"any\");\n\tconst [type, setType] = useState<string>(\"any\");\n\n\tconst getQuestions = async () => {\n\t\tconst newToken = await opentdb.getToken();\n\n\t\tvar options: TriviaOptions = {\n\t\t\tamount,\n\t\t\tcategory,\n\t\t\tdifficulty,\n\t\t\ttype,\n\t\t\ttoken: newToken,\n\t\t};\n\n\t\tconst uniqueTrivia: TriviaQuestion[] = await opentdb.getTrivia(options);\n\n\t\tsetQuestions(uniqueTrivia);\n\n\t\tconsole.log(uniqueTrivia);\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Typography variant=\"h2\" component=\"div\" align=\"center\" gutterBottom>\n\t\t\t\tTrivia Generator - Version 1.0\n\t\t\t</Typography>\n\t\t\t<div style={{ padding: 100, display: \"flex\" }}>\n\t\t\t\t<div id=\"selectAmount\" style={{ flex: 1 }}>\n\t\t\t\t\t<Typography variant=\"h5\" style={{ marginBottom: 20 }}>\n\t\t\t\t\t\tNumber of Questions\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<Slider\n\t\t\t\t\t\taria-label=\"Number of Questions\"\n\t\t\t\t\t\tvalueLabelDisplay=\"auto\"\n\t\t\t\t\t\tdefaultValue={1}\n\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\tmax={50}\n\t\t\t\t\t\tvalue={amount}\n\t\t\t\t\t\tonChange={(event: Event, newValue: number | number[], activeThumb: number) => {\n\t\t\t\t\t\t\tsetAmount(newValue as number);\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"selectCategory\" style={{ flex: 1 }}>\n\t\t\t\t\t<FormControl size=\"medium\">\n\t\t\t\t\t\t<Typography variant=\"h5\" style={{ marginBottom: 20 }}>\n\t\t\t\t\t\t\tCategory\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tvalue={category}\n\t\t\t\t\t\t\tdefaultValue={QuestionCategories[0]}\n\t\t\t\t\t\t\tonChange={(event: SelectChangeEvent) => {\n\t\t\t\t\t\t\t\tsetCategory(event.target.value as string);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tstyle={{ paddingLeft: 40, paddingRight: 40 }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{QuestionCategories.sort().map((category) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MenuItem value={category} key={category}>\n\t\t\t\t\t\t\t\t\t\t{category}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"selectDifficulty\" style={{ flex: 1 }}>\n\t\t\t\t\t<FormControl size=\"medium\">\n\t\t\t\t\t\t<Typography variant=\"h5\" style={{ marginBottom: 20 }}>\n\t\t\t\t\t\t\tDifficulty\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tvalue={difficulty}\n\t\t\t\t\t\t\tdefaultValue={QuestionDifficulties[0]}\n\t\t\t\t\t\t\tonChange={(event: SelectChangeEvent) => {\n\t\t\t\t\t\t\t\tsetDifficulty(event.target.value as string);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tstyle={{ paddingLeft: 40, paddingRight: 40 }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{QuestionDifficulties.sort().map((difficulty) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MenuItem value={difficulty} key={difficulty}>\n\t\t\t\t\t\t\t\t\t\t{difficulty}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"selectType\" style={{ flex: 1 }}>\n\t\t\t\t\t<FormControl size=\"medium\">\n\t\t\t\t\t\t<Typography variant=\"h5\" style={{ marginBottom: 20 }}>\n\t\t\t\t\t\t\tType\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tvalue={type}\n\t\t\t\t\t\t\tdefaultValue={QuestionTypes[0]}\n\t\t\t\t\t\t\tonChange={(event: SelectChangeEvent) => {\n\t\t\t\t\t\t\t\tsetType(event.target.value as string);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tstyle={{ paddingLeft: 40, paddingRight: 40 }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{QuestionTypes.sort().map((type) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MenuItem value={type} key={type}>\n\t\t\t\t\t\t\t\t\t\t{type}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<Button\n\t\t\t\tvariant=\"contained\"\n\t\t\t\tsize=\"large\"\n\t\t\t\tcolor=\"secondary\"\n\t\t\t\tstyle={{ textTransform: \"lowercase\", margin: 50 }}\n\t\t\t\tonClick={() => {\n\t\t\t\t\tgetQuestions();\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tClick here to generate your quiz!\n\t\t\t</Button>\n\t\t\t{questions.length > 0 &&\n\t\t\t\tquestions.map((questionData, index) => (\n\t\t\t\t\t<TriviaQuestionComponent\n\t\t\t\t\t\tkey={questionData.question}\n\t\t\t\t\t\tquestionData={questionData}\n\t\t\t\t\t\tquestionNumber={index}\n\t\t\t\t\t></TriviaQuestionComponent>\n\t\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n/*\nFuture Additions\n\n- Button to highlight correct answers\n\n- Select multiple categories (have category be array called categories, and call getQuestions for length of categories)\n\n\n*/\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}