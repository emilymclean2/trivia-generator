{"version":3,"sources":["components/TriviaQuestionComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TriviaQuestionComponent","questionData","Typography","question","opentdb","require","QuestionCategories","QuestionDifficulties","QuestionTypes","getRandomInt","max","Math","floor","random","App","useState","questions","setQuestions","getQuestions","a","getToken","newToken","options","amount","category","length","difficulty","type","token","getTrivia","uniqueTrivia","console","log","className","variant","component","align","gutterBottom","Button","size","color","onClick","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAOaA,EAA2C,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC1D,OACC,8BACC,cAACC,EAAA,EAAD,UAAaD,EAAaE,cCNvBC,EAAUC,EAAQ,IAUlBC,EAAqB,CAC1B,MACA,UACA,QACA,OACA,QACA,UACA,aACA,aACA,aACA,UACA,YACA,cACA,OACA,YACA,SACA,YACA,UACA,WACA,MACA,cACA,UACA,WACA,SACA,UACA,QACA,YAGKC,EAAuB,CAAC,MAAO,OAAQ,SAAU,QAEjDC,EAAgB,CAAC,MAAO,SAAU,WAAY,YAAa,WAE3DC,EAAe,SAACC,GACrB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,IAkDpBI,MA7Cf,WAAgB,IAAD,EACoBC,mBAA2B,IAD/C,mBACPC,EADO,KACIC,EADJ,KAIRC,EAAY,uCAAG,gCAAAC,EAAA,sEACGf,EAAQgB,WADX,cACdC,EADc,OAGhBC,EAAyB,CAC5BC,OAAQ,GACRC,SAAUlB,EAAmBG,EAAaH,EAAmBmB,SAC7DC,WAAYnB,EAAqBE,EAAaF,EAAqBkB,SACnEE,KAAMnB,EAAcC,EAAaD,EAAciB,SAC/CG,MAAOP,GARY,SAWyBjB,EAAQyB,UAAUP,GAX3C,OAWdQ,EAXc,OAapBb,EAAaa,GAEbC,QAAQC,IAAIF,GAfQ,2CAAH,qDAkBlB,OACC,sBAAKG,UAAU,MAAf,UACC,cAAC/B,EAAA,EAAD,CAAYgC,QAAQ,KAAKC,UAAU,MAAMC,MAAM,SAASC,cAAY,EAApE,4CAGA,cAACC,EAAA,EAAD,CACCJ,QAAQ,YACRK,KAAK,QACLC,MAAM,YACNC,QAAS,WACRvB,KALF,wDAUCF,EAAUS,OAAS,GACnBT,EAAU0B,KAAI,SAACzC,GAAD,OACb,cAAC,EAAD,CAAqDA,aAAcA,GAArCA,EAAaE,iBC9EjCwC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.744465d0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button, Typography } from \"@mui/material\";\r\n\r\ninterface Props {\r\n\tquestionData: TriviaQuestion;\r\n}\r\n\r\nexport const TriviaQuestionComponent: React.FC<Props> = ({ questionData }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Typography>{questionData.question}</Typography>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Button, Typography } from \"@mui/material\";\nimport { TriviaQuestionComponent } from \"./components/TriviaQuestionComponent\";\nconst opentdb = require(\"opentdb-api\");\n\ninterface TriviaOptions {\n\tamount: number;\n\tcategory: string;\n\tdifficulty: string;\n\ttype: string;\n\ttoken: any;\n}\n\nconst QuestionCategories = [\n\t\"any\",\n\t\"general\",\n\t\"books\",\n\t\"film\",\n\t\"music\",\n\t\"theatre\",\n\t\"television\",\n\t\"videogames\",\n\t\"boardgames\",\n\t\"science\",\n\t\"computers\",\n\t\"mathematics\",\n\t\"math\",\n\t\"mythology\",\n\t\"sports\",\n\t\"geography\",\n\t\"history\",\n\t\"politics\",\n\t\"art\",\n\t\"celebrities\",\n\t\"animals\",\n\t\"vehicles\",\n\t\"comics\",\n\t\"gadgets\",\n\t\"anime\",\n\t\"cartoons\",\n];\n\nconst QuestionDifficulties = [\"any\", \"easy\", \"medium\", \"hard\"];\n\nconst QuestionTypes = [\"any\", \"choice\", \"multiple\", \"truefalse\", \"boolean\"];\n\nconst getRandomInt = (max: number) => {\n\treturn Math.floor(Math.random() * max);\n};\n\n//const highlightCorrectAnswer = () => {};\n\nfunction App() {\n\tconst [questions, setQuestions] = useState<TriviaQuestion[]>([]);\n\t//console.log(QuestionDifficulty);\n\n\tconst getQuestions = async () => {\n\t\tconst newToken = await opentdb.getToken();\n\n\t\tvar options: TriviaOptions = {\n\t\t\tamount: 10,\n\t\t\tcategory: QuestionCategories[getRandomInt(QuestionCategories.length)],\n\t\t\tdifficulty: QuestionDifficulties[getRandomInt(QuestionDifficulties.length)],\n\t\t\ttype: QuestionTypes[getRandomInt(QuestionTypes.length)],\n\t\t\ttoken: newToken,\n\t\t};\n\n\t\tconst uniqueTrivia: TriviaQuestion[] = await opentdb.getTrivia(options);\n\n\t\tsetQuestions(uniqueTrivia);\n\n\t\tconsole.log(uniqueTrivia);\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Typography variant=\"h2\" component=\"div\" align=\"center\" gutterBottom>\n\t\t\t\tTrivia Generator - Version 1.0\n\t\t\t</Typography>\n\t\t\t<Button\n\t\t\t\tvariant=\"contained\"\n\t\t\t\tsize=\"large\"\n\t\t\t\tcolor=\"secondary\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\tgetQuestions();\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tClick here to generate 10 random questions\n\t\t\t</Button>\n\t\t\t{questions.length > 0 &&\n\t\t\t\tquestions.map((questionData) => (\n\t\t\t\t\t<TriviaQuestionComponent key={questionData.question} questionData={questionData}></TriviaQuestionComponent>\n\t\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n/*\nFuture Additions\n\n- Select \n- Select multiple categories\n\n\n*/\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}