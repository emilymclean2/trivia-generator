{"version":3,"sources":["components/Answer.tsx","components/TriviaQuestionComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Answer","text","isCorrect","showCorrect","correctColor","Card","variant","style","borderWidth","borderColor","margin","backgroundColor","CardContent","Typography","TriviaQuestionComponent","questionData","questionNumber","useState","setShowCorrect","answers","array","randomIndex","currentIndex","length","Math","floor","random","console","log","shuffle","incorrect_answers","correct_answer","textAlign","question","map","answer","CardActions","justifyContent","Button","size","onClick","marginBottom","opentdb","require","QuestionCategories","QuestionDifficulties","QuestionTypes","App","questions","setQuestions","amount","setAmount","category","setCategory","difficulty","setDifficulty","type","setType","getQuestions","a","getToken","newToken","options","token","getTrivia","uniqueTrivia","className","component","align","gutterBottom","padding","display","id","flex","Slider","aria-label","valueLabelDisplay","defaultValue","min","max","value","onChange","event","newValue","activeThumb","FormControl","Select","target","paddingLeft","paddingRight","sort","MenuItem","color","textTransform","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab1c5b76.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Typography, Card, CardContent } from \"@mui/material\";\r\n\r\ninterface Props {\r\n\ttext: string;\r\n\tisCorrect: boolean;\r\n\tshowCorrect: boolean;\r\n}\r\n\r\nexport const Answer: React.FC<Props> = ({ text, isCorrect, showCorrect }) => {\r\n\tvar correctColor = \"white\";\r\n\tif (isCorrect && showCorrect) {\r\n\t\tcorrectColor = \"hsla(107, 100%, 38%, 0.5)\";\r\n\t}\r\n\treturn (\r\n\t\t<Card variant=\"outlined\" style={{ borderWidth: 2, borderColor: \"black\", margin: 10, backgroundColor: correctColor }}>\r\n\t\t\t<CardContent>\r\n\t\t\t\t<Typography variant=\"h5\">{text}</Typography>\r\n\t\t\t</CardContent>\r\n\t\t</Card>\r\n\t);\r\n};\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Typography, Card, CardActions, CardContent, Button } from \"@mui/material\";\r\nimport { Answer } from \"./Answer\";\r\n\r\ninterface Props {\r\n\tquestionData: TriviaQuestion;\r\n\tquestionNumber: number;\r\n}\r\n\r\nexport const TriviaQuestionComponent: React.FC<Props> = ({ questionData, questionNumber }) => {\r\n\tconst [showCorrect, setShowCorrect] = useState(false);\r\n\t//const [answers, setAnswers] = useState([...questionData.incorrect_answers, questionData.correct_answer]);\r\n\tconst shuffle = (array: string[]) => {\r\n\t\tlet currentIndex = array.length,\r\n\t\t\trandomIndex;\r\n\r\n\t\t// While there remain elements to shuffle...\r\n\t\twhile (currentIndex !== 0) {\r\n\t\t\t// Pick a remaining element...\r\n\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\r\n\t\t\tcurrentIndex--;\r\n\r\n\t\t\t// And swap it with the current element.\r\n\t\t\t[array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\r\n\t\t}\r\n\r\n\t\tconsole.log(\"shuffle\");\r\n\r\n\t\treturn array;\r\n\t};\r\n\r\n\tvar answers: string[] = shuffle([...questionData.incorrect_answers, questionData.correct_answer]);\r\n\r\n\t//const answers: string[] = shuffle([...questionData.incorrect_answers, questionData.correct_answer]);\r\n\t//shuffle(answers);\r\n\r\n\t// useEffect(() => {\r\n\t// \tshuffle(answers);\r\n\t// }, []);\r\n\r\n\treturn (\r\n\t\t<Card\r\n\t\t\tstyle={{\r\n\t\t\t\tmargin: 100,\r\n\t\t\t\t//backgroundColor: \"lightpink\"\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<CardContent>\r\n\t\t\t\t<Typography variant=\"h6\" style={{ textAlign: \"left\" }}>\r\n\t\t\t\t\t{questionNumber + 1}. {questionData.question}\r\n\t\t\t\t</Typography>\r\n\t\t\t\t{answers.map((answer) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Answer\r\n\t\t\t\t\t\t\tkey={answer}\r\n\t\t\t\t\t\t\ttext={answer}\r\n\t\t\t\t\t\t\tisCorrect={answer === questionData.correct_answer}\r\n\t\t\t\t\t\t\tshowCorrect={showCorrect}\r\n\t\t\t\t\t\t></Answer>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</CardContent>\r\n\t\t\t<CardActions style={{ justifyContent: \"center\" }}>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tsetShowCorrect(true);\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tstyle={{ marginBottom: 10 }}\r\n\t\t\t\t>\r\n\t\t\t\t\tShow answer\r\n\t\t\t\t</Button>\r\n\t\t\t</CardActions>\r\n\t\t</Card>\r\n\t);\r\n};\r\n\r\n/*\r\nTo fix:\r\n\r\n- Answers shuffle again after clicking \"show answer\"\r\n\r\n*/\r\n\r\n/*\r\nTo add:\r\n\r\nmake component for answers? if clicked, highlights correct answer.\r\n\r\nQuestion: make case / switch thing: if true or false, add in front of question, etc\r\n\r\n*/\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Button, Typography, FormControl, Select, SelectChangeEvent, MenuItem, Slider, TextField } from \"@mui/material\";\nimport { TriviaQuestionComponent } from \"./components/TriviaQuestionComponent\";\nconst opentdb = require(\"opentdb-api\");\n\ninterface TriviaOptions {\n\tamount: number;\n\tcategory: string;\n\tdifficulty: string;\n\ttype: string;\n\ttoken: any;\n}\n\nconst QuestionCategories = [\n\t\"any\",\n\t\"general\",\n\t\"books\",\n\t\"film\",\n\t\"music\",\n\t\"theatre\",\n\t\"television\",\n\t\"videogames\",\n\t\"boardgames\",\n\t\"science\",\n\t\"computers\",\n\t\"mathematics\",\n\t\"math\",\n\t\"mythology\",\n\t\"sports\",\n\t\"geography\",\n\t\"history\",\n\t\"politics\",\n\t\"art\",\n\t\"celebrities\",\n\t\"animals\",\n\t\"vehicles\",\n\t\"comics\",\n\t\"gadgets\",\n\t\"anime\",\n\t\"cartoons\",\n];\n\nconst QuestionDifficulties = [\"any\", \"easy\", \"medium\", \"hard\"];\n\nconst QuestionTypes = [\"any\", \"choice\", \"multiple\", \"truefalse\", \"boolean\"];\n\n// const getRandomInt = (max: number) => {\n// \treturn Math.floor(Math.random() * max);\n// };\n\nfunction App() {\n\tconst [questions, setQuestions] = useState<TriviaQuestion[]>([]);\n\tconst [amount, setAmount] = useState<number>(10);\n\tconst [category, setCategory] = useState<string>(\"any\");\n\tconst [difficulty, setDifficulty] = useState<string>(\"any\");\n\tconst [type, setType] = useState<string>(\"any\");\n\n\tconst getQuestions = async () => {\n\t\tconst newToken = await opentdb.getToken();\n\n\t\tvar options: TriviaOptions = {\n\t\t\tamount,\n\t\t\tcategory,\n\t\t\tdifficulty,\n\t\t\ttype,\n\t\t\ttoken: newToken,\n\t\t};\n\n\t\tconst uniqueTrivia: TriviaQuestion[] = await opentdb.getTrivia(options);\n\n\t\tsetQuestions(uniqueTrivia);\n\n\t\tconsole.log(uniqueTrivia);\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"App\"\n\t\t\t//style={{ backgroundColor: \"lightblue\" }}\n\t\t>\n\t\t\t<Typography variant=\"h2\" component=\"div\" align=\"center\" gutterBottom>\n\t\t\t\tTrivia Generator - Version 1.0\n\t\t\t</Typography>\n\t\t\t<div style={{ padding: 100, display: \"flex\" }}>\n\t\t\t\t<div id=\"selectAmount\" style={{ flex: 1 }}>\n\t\t\t\t\t<Typography variant=\"h5\" style={{ marginBottom: 20 }}>\n\t\t\t\t\t\tNumber of Questions\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<Slider\n\t\t\t\t\t\taria-label=\"Number of Questions\"\n\t\t\t\t\t\tvalueLabelDisplay=\"auto\"\n\t\t\t\t\t\tdefaultValue={10}\n\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\tmax={50}\n\t\t\t\t\t\tvalue={amount}\n\t\t\t\t\t\tonChange={(event: Event, newValue: number | number[], activeThumb: number) => {\n\t\t\t\t\t\t\tsetAmount(newValue as number);\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"selectCategory\" style={{ flex: 1 }}>\n\t\t\t\t\t<FormControl size=\"medium\">\n\t\t\t\t\t\t<Typography variant=\"h5\" style={{ marginBottom: 20 }}>\n\t\t\t\t\t\t\tCategory\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tvalue={category}\n\t\t\t\t\t\t\tdefaultValue={QuestionCategories[0]}\n\t\t\t\t\t\t\tonChange={(event: SelectChangeEvent) => {\n\t\t\t\t\t\t\t\tsetCategory(event.target.value as string);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tstyle={{ paddingLeft: 40, paddingRight: 40 }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{QuestionCategories.sort().map((category) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MenuItem value={category} key={category}>\n\t\t\t\t\t\t\t\t\t\t{category}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"selectDifficulty\" style={{ flex: 1 }}>\n\t\t\t\t\t<FormControl size=\"medium\">\n\t\t\t\t\t\t<Typography variant=\"h5\" style={{ marginBottom: 20 }}>\n\t\t\t\t\t\t\tDifficulty\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tvalue={difficulty}\n\t\t\t\t\t\t\tdefaultValue={QuestionDifficulties[0]}\n\t\t\t\t\t\t\tonChange={(event: SelectChangeEvent) => {\n\t\t\t\t\t\t\t\tsetDifficulty(event.target.value as string);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tstyle={{ paddingLeft: 40, paddingRight: 40 }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{QuestionDifficulties.sort().map((difficulty) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MenuItem value={difficulty} key={difficulty}>\n\t\t\t\t\t\t\t\t\t\t{difficulty}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"selectType\" style={{ flex: 1 }}>\n\t\t\t\t\t<FormControl size=\"medium\">\n\t\t\t\t\t\t<Typography variant=\"h5\" style={{ marginBottom: 20 }}>\n\t\t\t\t\t\t\tType\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tvalue={type}\n\t\t\t\t\t\t\tdefaultValue={QuestionTypes[0]}\n\t\t\t\t\t\t\tonChange={(event: SelectChangeEvent) => {\n\t\t\t\t\t\t\t\tsetType(event.target.value as string);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tstyle={{ paddingLeft: 40, paddingRight: 40 }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{QuestionTypes.sort().map((type) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MenuItem value={type} key={type}>\n\t\t\t\t\t\t\t\t\t\t{type}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{/* <TextField id=\"outlined-textarea\" label=\"Multiline Placeholder\" placeholder=\"Placeholder\" multiline /> */}\n\t\t\t<Button\n\t\t\t\tvariant=\"contained\"\n\t\t\t\tsize=\"large\"\n\t\t\t\tcolor=\"secondary\"\n\t\t\t\tstyle={{ textTransform: \"lowercase\", margin: 50 }}\n\t\t\t\tonClick={() => {\n\t\t\t\t\tgetQuestions();\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tClick here to generate your quiz!\n\t\t\t</Button>\n\t\t\t{questions.length > 0 &&\n\t\t\t\tquestions.map((questionData, index) => (\n\t\t\t\t\t<TriviaQuestionComponent\n\t\t\t\t\t\tkey={questionData.question}\n\t\t\t\t\t\tquestionData={questionData}\n\t\t\t\t\t\tquestionNumber={index}\n\t\t\t\t\t></TriviaQuestionComponent>\n\t\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n/*\nFuture Additions\n\n- Button to highlight correct answers\n\n- Select multiple categories (have category be array called categories, and call getQuestions for length of categories)\n\n\n*/\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}